#include <iostream>
#include <vector>
using namespace std;
bool evaluateStatement(bool p, bool q) {
    return (!p || q); // return (p->q)
}

bool evaluateOr(bool p, bool q) {
    return (p || q); 
}
bool evaluateNot(bool p) {
    return (!p); 
}

bool evaluateAnd(bool p, bool q) {
    return (p & q); 
}
void calculateTruthTable(vector<vector<bool>>& truthTable) {
    for (int i = 0; i < 8; ++i) {
        bool k = static_cast<bool>(i & 4); // khaled
        bool m = static_cast<bool>(i & 2); // mariam
        bool a = static_cast<bool>(i & 1); // aly

        truthTable[i][0] = k;
        truthTable[i][1] = m;
        truthTable[i][2] = a;
        truthTable[i][3] = evaluateStatement(a, evaluateNot(evaluateOr(k,m)));   ///Contrapositive
        truthTable[i][4] = evaluateOr(a, m); //  A or M
        truthTable[i][5] = evaluateOr(a, evaluateNot(k)); // conclusion (A or ~k)
    }
}

int main() {
    vector<vector<bool>> truthTable(8, vector<bool>(6, false));

    calculateTruthTable(truthTable);

    cout << "Truth Table:\n";
    cout << "K\tM\tA\tP1\tP2\tConclusion\n";
    for (int i = 0; i < 8; ++i) {
        for (int j = 0; j < 6; ++j) {
            cout << truthTable[i][j] << '\t';
        }
        cout << '\n';
    }

    bool satisfiable = false;
    for (int i = 0; i < 8; ++i) {
        if (truthTable[i][5]) { // at least one is true
            satisfiable = true;
            break;
        }
    }

    bool valid = true;
    for (int i = 0; i < 8; ++i) {
        if (truthTable[i][5] != true) { // all must be true
            valid = false; 
            break;
        }
    }

    cout << "\n";
    if (satisfiable) {
        cout << "The set of formulas is satisfiable.\n";
        if (valid) {
            cout << "The argument is valid.\n";
        } else {
            cout << "The argument is falsifiable.\n";
        }
    } else {
        cout << "The set of formulas is not satisfiable.\n";
        cout << "The argument is vacuously valid.\n";
    }

    return 0;
}
