#include <iostream>
using namespace std;

bool evaluateStatement(bool p, bool q) {
    return (!p || q); // return (p->q)
}

bool evaluateOr(bool p, bool q) {
    return (p || q);
}

bool evaluateNot(bool p) {
    return (!p);
}

bool evaluateAnd(bool p, bool q) {
    return (p & q);
}

void calculateTruthTable() {
    bool K[2] = { false, true };
    bool M[2] = { false, true };
    bool A[2] = { false, true };

    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 2; ++j) {
            for (int k = 0; k < 2; ++k) {
                cout << K[i] << "\t" << M[j] << "\t" << A[k] << "\t" << evaluateStatement(A[k], evaluateNot(evaluateOr(K[i], M[j]))) << "\t" << evaluateOr(A[k], M[j]) << "\t" << evaluateOr(A[k], evaluateNot(K[i])) << endl;
            }
        }
    }
}

void Satifiable(bool sat) {
    bool K[2] = { false, true };
    bool M[2] = { false, true };
    bool A[2] = { false, true };
    bool P1, P2, C;
    while (!sat) {
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 2; ++j) {
                for (int k = 0; k < 2; ++k) {
                    P1 = evaluateStatement(A[k], evaluateNot(evaluateOr(K[i], M[j])));
                    P2 = evaluateOr(A[k], M[j]);
                    C = evaluateOr(A[k], evaluateNot(K[i]));
                    if ((P1 && P2 && C) == 1) {
                        sat = true;
                        break;
                    }
                }
            }
        }
        break;
    }
    if (!sat) {
        cout << endl;
        cout << "The set of statements is not satisfiable" << endl;
        cout << endl;
    }
    else
        cout << "The set of statements is satisfiable" << endl;
}

void Valid(bool val) {
    bool K[2] = { false, true };
    bool M[2] = { false, true };
    bool A[2] = { false, true };
    bool P1, P2, C;
    while (!val) {
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 2; ++j) {
                for (int k = 0; k < 2; ++k) {
                    P1 = evaluateStatement(A[k], evaluateNot(evaluateOr(K[i], M[j])));
                    P2 = evaluateOr(A[k], M[j]);
                    C = evaluateOr(A[k], evaluateNot(K[i]));
                    if ((!C) && (P1 && P2)) {
                        val = false;
                        break;
                    }
                }
            }
        }
        break;
    }
    if (!val) {
        cout << endl;
        cout << "The set of statements is Valid" << endl;
        cout << endl;
    }
    else
        cout << "The set of statements is Falsifiable" << endl;
}

int main() {

    cout << "Truth Table:\n";
    cout << endl;
    cout << "K\tM\tA\tP1\tP2\tConclusion\n";
    calculateTruthTable();
    cout << endl;
    bool sat = false;
    Satifiable(sat);

    bool valid = true;
    Valid(valid);
    return 0;
}
